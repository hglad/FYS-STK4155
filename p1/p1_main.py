from proj1_funcs import *

plt.rcParams.update({'font.size': 14})

"""
The main file does the following tasks:
    Perform OLS with data generated by the Franke function, without resampling
Then find the confidence interval of beta for p = 5.
"""
def main(n,dataset,method,p5_case=False):
    if (method not in ['ols', 'ridge', 'lasso']):
        print ('Method \"%s\" not recognized. Please use one of the following methods: ols, ridge, lasso' % method)
        sys.exit()

    # np.random.seed(6)
    np.random.seed(10)
    print ("Dataset:", dataset)
    print ("Method:", method)

    # Determine dataset to analyze
    if (dataset == 'Franke'):
        x, y, z = Franke_dataset(n, noise=0.5)
        z_full = z
        nx = n
        ny = n
    else:
        z_full = DataImport('Norway_1arc.tif', sc=20)
        z_full = z_full/np.max(z_full)
        z = z_full/np.max(z_full)
        nx = len(z[0,:])
        ny = len(z[:,0])
        x = np.linspace(0,1,nx)
        y = np.linspace(0,1,ny)
        x, y = np.meshgrid(x, y)

    z_1d = np.ravel(z)

    # Define ranges for complexity and parameters
    min_p = int(sys.argv[1]);  max_p = int(sys.argv[2])
    # min_param = float(sys.argv[3]); max_param = float(sys.argv[3])

    min_param = 1e-4; max_param = 1    # ridge
    # min_param = 5e-5; max_param = 1     # lasso
    # 5e-6 lowest param for terrain, lasso
    # 1e-5 lowest param for franke, lasso
    n_params = 5

    if (method == 'ols'):
        n_params = 1   # only run once for OLS, parameter value does not matter

    polys = np.arange(min_p,max_p)
    spacing = 'regular'
    if (spacing == 'log'):
        params = np.linspace(min_param, max_param, n_params)
    else:
        params = np.logspace(np.log10(min_param), np.log10(max_param), n_params)

    # Initialize arrays
    R2_scores,MSE_test,MSE_train,MSE_best_cv,error_test,bias_test,var_test,\
    error_train = (np.zeros((len(polys), n_params)) for i in range(8))
    print ("Polynomials:", polys)
    print ("Parameters:", params)

    # Perform cross-validation with given set of polynomials and parameters
    for i in range(len(params)):
        for j in range(len(polys)):
            sys.stdout.write('poly %d/%d, param %d/%d  \r' % (j+1,len(polys),i+1,len(params)))
            sys.stdout.flush()

            R2_scores[j,i], MSE_test[j,i], MSE_train[j,i], error_test[j,i],  bias_test[j,i], var_test[j,i], error_train[j,i] = cross_validation(x, y, z, k=5, p=polys[j], dataset=dataset, param=params[i], method=method)
    # end cross-validation
    print ("\n\n-----CV done-----")

    # Find best polynomial degree and hyperparameter using best MSE score
    if (method == 'ols'):
        poly_ind = np.argmin(MSE_test[:,0])
        best_poly = polys[poly_ind]
        param_ind = 0

    else:
        min_mse_coords = np.argwhere(MSE_test==MSE_test.min())
        poly_ind = min_mse_coords[0,0]
        param_ind = min_mse_coords[0,1]

    best_poly = polys[ poly_ind ]
    best_param = params[ param_ind ]
    print ("Polynomial degree with best MSE:", best_poly)
    print ("Param with best MSE: %1.3e" % best_param)
    print ("MSE:", MSE_test[poly_ind, param_ind])
    print("R2:", R2_scores[poly_ind, param_ind])

    # Visualize results
    # plot_bias_var_err(polys, bias_test, var_test, error_test, error_train)
    # plot_mse_train_test(polys, MSE_test, MSE_train, params, nx, ny)
    # plot_mse_poly_param(params, polys, MSE_test)
    sb_heatmap(params, polys, MSE_test)

    # Compare with true data if using Franke dataset
    if (dataset == 'Franke'):
        z = FrankeFunction(x,y)

    # perform prediction for given polynomial degree, hyperparameter
    # visualize_model(x,y,z, 45, 3e-6, method, z_full)

    # z_, z_pred = predict_poly(x,y,z,best_poly,best_param,method)
    # z_pred_2d = np.reshape(z_pred, (ny,nx))
    # plot_surf(x,y,z,color=cm.coolwarm, alpha=0.25)
    # plot_pred(x,y,z_pred_2d)
    # plt.show()

UnitTest()
main(n=50,dataset='Terrain',method=sys.argv[3],p5_case=True)
